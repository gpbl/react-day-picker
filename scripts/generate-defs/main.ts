import fs from 'node:fs';
import path from 'node:path';

import prettier from 'prettier';
import {
  EnumDeclaration,
  FunctionDeclaration,
  InterfaceDeclaration,
  SyntaxKind,
  TypeAliasDeclaration,
  VariableDeclaration
} from 'ts-morph';

import { createInterfaceDef } from './createInterfaceDef.ts';
import { createTypeAliasDef } from './createTypeAliasDef.ts';
import { project } from './project.ts';
import { getExports } from './utils/getExports.ts';
import { createEnumDef } from './createEnumDef.ts';
import { ApiDef, ApiDefs } from './types.ts';
import { createVariableDef } from './createVariableDef.ts';
import { createFunctionDef } from './createFunctionDef.ts';

const exportedDeclarations = getExports(project);

const DEST = path.resolve('../website/data/apiDefs.ts');

async function writeDefs() {
  const defs: Partial<ApiDefs> = {};
  const declarationNames = Object.keys(exportedDeclarations).sort();
  for (const declarationName of declarationNames) {
    const declaration = exportedDeclarations[declarationName];

    let def: ApiDef | undefined;
    switch (declaration.getKind()) {
      case SyntaxKind.TypeAliasDeclaration:
        def = await createTypeAliasDef(declaration as TypeAliasDeclaration);
        break;
      case SyntaxKind.EnumDeclaration:
        def = await createEnumDef(declaration as EnumDeclaration);
        break;
      case SyntaxKind.VariableDeclaration:
        def = await createVariableDef(declaration as VariableDeclaration);
        break;
      case SyntaxKind.FunctionDeclaration:
        def = await createFunctionDef(declaration as FunctionDeclaration);
        break;
      case SyntaxKind.ClassDeclaration:
        console.warn('✖️ ClassDeclaration %s not parsed', declarationName);
        break;
      case SyntaxKind.InterfaceDeclaration: {
        def = await createInterfaceDef(declaration as InterfaceDeclaration);
        break;
      }
    }
    defs[declarationName] = def;
  }

  const json = JSON.stringify(defs);

  const content = `// This file is generated by scripts/generate-defs/main.ts
  import { ApiDefs } from 'scripts';
  /** The API definitions for the DayPicker components. */
  export const apiDefs: ApiDefs = ${json};
  `;
  const formattedContent = await prettier.format(content, {
    parser: 'typescript'
  });
  fs.writeFileSync(DEST, formattedContent);
  console.log(`\n✅ Wrote ${Object.keys(defs).length} definitions in ${DEST}`);
}

writeDefs();
