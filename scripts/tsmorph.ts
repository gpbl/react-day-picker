import fs from 'node:fs';
import type { PropsBase } from 'react-day-picker';
import {
  InterfaceDeclaration,
  JSDocDeprecatedTag,
  JSDocLink,
  JSDocLinkCode,
  JSDocLinkPlain,
  JSDocSeeTag,
  JSDocText,
  Project
} from 'ts-morph';

const project = new Project();
project.addSourceFilesFromTsConfig('./../tsconfig.build.json');

function getExportedMemberByName(project: Project, name: string) {
  const sourceFiles = project.getSourceFiles();

  for (const sourceFile of sourceFiles) {
    const exportedDeclarations = sourceFile.getExportedDeclarations();
    const exportedDeclaration = exportedDeclarations.get(name);
    if (exportedDeclaration) {
      return exportedDeclaration;
    }
  }
}

type PropsMember = {
  name: string;
  type: string;
  required: boolean;
  deprecated: string | false;
  jsDocComments: string | undefined;
  see: (string | undefined)[] | undefined;
};

function getMember(name: string) {
  // Example usage of getExportedMemberByName
  const exportedMember = getExportedMemberByName(project, name)?.[0];

  if (exportedMember instanceof InterfaceDeclaration) {
    const parsedMember: PropsMember[] = [];
    const interfaceDeclaration = exportedMember as InterfaceDeclaration;

    // Get the properties of the interface
    const properties = interfaceDeclaration.getProperties();

    // Iterate over each property
    for (const property of properties) {
      // Get the name of the property
      const name = property.getName();

      // Get the type of the property
      const type = property.getType().getText();

      // Check if the property is required
      const required = !property.hasQuestionToken();

      // Get the JSDoc comment of the property
      const jsDocComments = property
        .getJsDocs()
        .map((jsDoc) => {
          return jsDoc.getCommentText();
        })
        .join('\n');

      // Inside your loop over the properties
      const jsDocTags = property
        .getJsDocs()
        .flatMap((jsDoc) => jsDoc.getTags());

      // Filter for @see tags
      const seeTags = jsDocTags.filter(
        (tag) => tag.getTagName() === 'see'
      ) as JSDocSeeTag[];

      const deprecatedTags = jsDocTags.filter(
        (tag) => tag.getTagName() === 'deprecated'
      ) as JSDocDeprecatedTag[] | undefined;

      const deprecated = deprecatedTags?.[0]?.getCommentText();

      parsedMember.push({
        name,
        type: type.replace(/import\(.*\)\./, ''),
        required,
        deprecated: deprecated ?? false,
        jsDocComments,
        see: seeTags.map((tag) => {
          // is there a bug in ts-morph to get the full URLs?
          return tag.getCommentText()?.replace('://', 'https://');
        })
      });
    }
    return parsedMember;
  }
}

const propsBase = getMember('PropsBase') as unknown as Record<
  keyof PropsBase,
  PropsMember
>;
// Convert propsBase to a string representation
const propsBaseStr = JSON.stringify(propsBase, null, 2);

// Write the string to a .ts file
fs.writeFileSync(
  '../website/data/api/PropsBase.ts',
  `// Generated by scripts/tsmorph.ts
import type { PropsBase } from 'react-day-picker';

type PropsMember = {
  name: keyof PropsBase;
  type: string;
  required: boolean;
  deprecated: string | false;
  jsDocComments: string | undefined;
  see: (string | undefined)[] | undefined;
};
  
const propsBase: Array<PropsMember> = ${propsBaseStr};
export default propsBase;
`
);
